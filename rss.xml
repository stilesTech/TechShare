<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[stiles 的技术分享]]></title>
        <description><![CDATA[🌟 分享效率方法 🪄、优质文章 📑、编程知识 🎹、实用工具 🛠️ 和有趣内容 😄。]]></description>
        <link>http://stiles.cc</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Tue, 31 Jan 2023 12:54:28 GMT</lastBuildDate>
        <atom:link href="http://stiles.cc/rss.xml" rel="self" type="application/rss+xml"/>
        <copyright><![CDATA[stiles 2023]]></copyright>
        <language><![CDATA[zh-CN]]></language>
        <item>
            <title><![CDATA[使用n8n订阅网站rss消息推送到Telegram]]></title>
            <link>http://stiles.cc/docs/tools/%E4%BD%BF%E7%94%A8n8n%E8%AE%A2%E9%98%85%E7%BD%91%E7%AB%99rss%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E5%88%B0Telegram.html</link>
            <guid isPermaLink="true">http://stiles.cc/docs/tools/%E4%BD%BF%E7%94%A8n8n%E8%AE%A2%E9%98%85%E7%BD%91%E7%AB%99rss%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E5%88%B0Telegram.html</guid>
            <pubDate>Thu, 28 Jul 2022 11:42:06 GMT</pubDate>
            <content:encoded><![CDATA[<p>n8n 是一个免费且开放的、公平代码许可的基于节点的工作流自动化工具。它可以自托管、易于扩展。可帮助您将任何具有 API 的应用程序与任何其他应用程序连接起来，并使用很少或无需代码来操作其数据。</p> <blockquote><p>n8n is a free and open <a href="https://link.juejin.cn/?target=http%3A%2F%2Ffaircode.io%2F" target="_blank" rel="noopener noreferrer">fair-code<span> </span></a> licensed node based Workflow Automation Tool. It can be self-hosted, easily extended. helps you to connect any app with an API with any other, and manipulate its data with little or no code.</p></blockquote>  <p>简单点来讲，n8n就是一个能够链接多个API应用程序，基于自定义工作流进行协作的开源工具。
接下来演示下如何通过n8n实现网站rss更新通知到telegram.</p> <p>1:创建telegram机器人
2:获取chat id
3:构建n8n事件流</p> <p><strong>1.如何为Telegram创建机器人</strong></p> <p>首先是第一件事。您需要注册Telegram。</p> <p>打开Telegram应用程序，搜索@BotFather并开始聊天。发送/newbot命令并按照说明进行操作。完成初始步骤后，您将获得：</p> <ul><li>您自己的令牌</li> <li>Telegram api URL - api.telegram.org/</li> <li>链接到文档</li></ul> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f59ca61b6f0d40e1ba0ed04e609ddab5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-07-29_14-11-33.png"></p> <p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fapi.telegram.org%2Fbot5471903376%3AAAF7XmoadmlkFiLKgRA1SnQKcP23MkrKN7I%2FgetUpdates" target="_blank" rel="noopener noreferrer">api.telegram.org/bot54719033…<span> </span></a></p> <p><strong>2.获取 chatId</strong></p> <p>观察这个 url <code>https://api.telegram.org/bot{token}/getUpdates</code></p> <p>使用第一步获得的 <code>token</code> 替换上述 url 中的 <code>{token}</code> 然后得到新的 url，复制粘贴到浏览器地址栏，回车请求。不出意外你会得到如下 response</p> <div class="language-json extra-class"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">"ok"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
复制代码
</code></pre></div><p>回到telegram进入到你创建的机器人会话，随便和它说一句话，比如给它发一句 "Hello World"，然后重新请求一遍上述的 url <code>https://api.telegram.org/bot{token}/getUpdates</code>，不出意外你收到的 response 类似是这样了</p> <div class="language-json extra-class"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"ok"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"result"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        ...
        <span class="token property">"chat"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">5210226195</span><span class="token punctuation">,</span>
          <span class="token property">"first_name"</span><span class="token operator">:</span> <span class="token string">"摩根"</span><span class="token punctuation">,</span>
          <span class="token property">"last_name"</span><span class="token operator">:</span> <span class="token string">"侦探"</span><span class="token punctuation">,</span>
          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"private"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
复制代码
</code></pre></div><p>其中的 result[0].message.chat.id 的值就是 <code>chatId</code> 也就是 5210226195
知道了 token 和 chatId 就可以使用 bot 了。</p> <h1 id="curl-测试">curl 测试</h1> <div class="language-bash extra-class"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-X</span> POST https://api.telegram.org/bot<span class="token punctuation">{</span>token<span class="token punctuation">}</span>/sendMessage <span class="token parameter variable">-d</span> <span class="token assign-left variable">chat_id</span><span class="token operator">=</span><span class="token punctuation">{</span>chatId<span class="token punctuation">}</span> <span class="token parameter variable">-d</span> <span class="token assign-left variable">text</span><span class="token operator">=</span><span class="token string">"Hello World"</span>
复制代码
</code></pre></div><p>这是发送 post 请求。使用实际的 <code>token</code> 和 <code>chatId</code> 替换 shell command 中的 <code>{token}</code> 和 <code>{chatId}</code>
不出意外，你的 bot 会收到 "Hello World"，恭喜，这已经成功了！</p> <p><strong>3.搭建n8n流水线</strong></p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a29f493f9ef41bcb716aa3087ee27c2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-07-29_11-36-56.png"></p> <p>我是参考: <strong><a href="https://link.juejin.cn/?target=https%3A%2F%2Fforum.cloudron.io%2Ftopic%2F5736%2Fsetting-up-an-automated-blog-using-n8n-tiny-tiny-rss" target="_blank" rel="noopener noreferrer">Setting up an Automated Blog using n8n &amp; Tiny Tiny RSS<span> </span></a></strong></p> <p>1：选择一个支持rss的网站，比如：(<a href="https://link.juejin.cn/?target=http%3A%2F%2Fstiles.cc%2Ffeed%2F" target="_blank" rel="noopener noreferrer">stiles.cc/feed/<span> </span></a>)
2：使用<a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.notion.so%2F7b02a7745abf4350ba2e5839800fe039" target="_blank" rel="noopener noreferrer">rss-stiles-workflow<span> </span></a>地址，导入对应的工作流
3：替换RSS Feed Read模块成想要订阅的RSS地址
4：替换Telegram模块成之前获取到的token和chatid</p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eabfd220952d47fd93ce7edca2125e72~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-07-29_13-59-03.png"> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66885be7c504413a8cf268c51c9ca028~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-07-29_14-01-23.png"></p> <p>执行该workflow，但rss站点有新的文章发布的时候，telegram就能相应的发送消息通知，如下图：
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61b8d3e869db449586de213447029898~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-07-29_14-45-02.png">
实际上n8n可以实现很多场景，你可以通过<a href="https://link.juejin.cn/?target=https%3A%2F%2Fn8n.io%2Fworkflows%2F" target="_blank" rel="noopener noreferrer">n8n.io/workflows<span> </span></a> 去搜索需要的工作流。比较容易想到的，devops流水线，多端消息互通，自动通信telegram机器人等</p> <p>参考资料</p> <p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fhellodk.cn%2Fpost%2F743" target="_blank" rel="noopener noreferrer">hellodk.cn/post/743<span> </span></a></p> <p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fforum.cloudron.io%2Ftopic%2F5736%2Fsetting-up-an-automated-blog-using-n8n-tiny-tiny-rss" target="_blank" rel="noopener noreferrer">forum.cloudron.io/topic/5736/…<span> </span></a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Upsource实践指南]]></title>
            <link>http://stiles.cc/docs/engineering/Upsource%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97.html</link>
            <guid isPermaLink="true">http://stiles.cc/docs/engineering/Upsource%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97.html</guid>
            <pubDate>Tue, 10 May 2022 12:36:01 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="简介">简介</h2> <p>Upsource是一款由Jetbrains公司出品的代码审查工具，具有社交属性，将代码予以团队成员或其他人分享，讨论。浏览代码视觉效果美观，可以与IDEA无缝集成，完成代码审查工作。</p> <p>官方文档：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.jetbrains.com%2Fhelp%2Fupsource%2Fgetting-started.html" target="_blank" rel="noopener noreferrer">点击查看<span> </span></a></p> <h2 id="一-代码审查中的角色">一：代码审查中的角色</h2> <p>在 Upsource 中，典型的代码审查过程涉及两个或多个参与者，可分为以下角色：</p> <ul><li><strong>Author</strong> 是一个提交者，代码审查即是来检查他/她所提交的更改。</li> <li><strong>Reviewer</strong> 应检查作者提交的更改并留下反馈。他还可以完成审查、提出对更改的关注,也可以关闭这次审查。</li> <li><strong>Watcher</strong> 预计不会参与审核过程。不太需要去关心代码的细节修改，关注重点是项目的状态以及团队成员的讨论。</li></ul> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f2a0b9027cf4163b7ced60bbed5a3cd~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-05-10_11-33-47.png">
如何邀请别人审查代码，作为Review的发起者，你可以点击左侧Overview 模块下对应的+符号， 邀请团队成员或者其他人作为<code>reviewer</code>或者<code>watcher</code>，同时，你可以将<code>鼠标悬停在头像之上</code>，看到该成员本次review的进度,如下所示</p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9c577f6db284a34b777f2637115d633~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-05-10_11-36-08.png"></p> <h2 id="二-审查流程"><strong>二：审查流程</strong></h2> <p>代码的修改者一般作为审查流程的发起者，如果要邀请团队成员其他成员进行代码审查，需要进行以下操作：</p> <ul><li>将更改内容提交到版本管理系统（Gitlab/Github）。</li> <li>创建一个审查流程（可以设置为系统自动发起）。</li> <li>邀请审查参与者（Reviewer和可选的Watcher）。</li> <li>讨论代码的问题，审查流程参与者交换意见。</li> <li>Author解决问题，提交版本修订，并将新的修订添加到现有的评审中。（IDEA的Upsource插件支持自动添加）</li> <li>当Reviewer接受你的修改后，便可以关闭审查流程。</li></ul> <p>以下详细讲解如何创建Upsource代码审查。</p> <h2 id="三-案例演示">三：案例演示</h2> <h3 id="发起评论">发起评论</h3> <p>创建了2个developer角色的账号，developer1和developer2.</p> <p>使用developer1账号进行评论，点击红色的铅笔icon进行评论，在评论框中可以使用@符号来通知到对应的开发人员。</p> <p>如下所示发送了：@developer2 是否有添加单元测试？</p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6c175b895c24335b1349537b7e5bdb8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-05-10_11-44-20.png"></p> <p>切换到developer2账号，点击review视图，可以查看到对应的的评论信息，如下图</p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4bc942e10337487c95fa862dd0d8fc30~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-05-07_18-14-22.png"></p> <p>点击#符号可以跳转到具体评论位置，进行回复</p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f05c64cf8e6f4d60bbe75427f2d2e618~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-05-07_18-07-50.png"></p> <p>developer1评论发起者可以通过点击右侧的resolve按钮表示处理已解决，</p> <p>也可以点击添加对应标签，标注这个问题是功能性的BUG还是代码的样式问题等。也可以自定义标签在全局项目中使用。</p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05bf5aa2078041b583f102136bd81e8b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-05-10_11-50-45.png"></p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a7e555b36f44ffdbfddee60dd4bd232~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-05-07_18-21-09.png"></p> <h3 id="取消消息推送">取消消息推送</h3> <p>如果想停止对评论的监视，停止接收消息通知，可以从观察者列表中删除你自己。</p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44662a477f9941e2b3a4969e2e54e512~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-05-10_11-53-52.png"></p> <p>如果不想删除自己，可以设置为Mute review（消息免打扰），这样这个评审后续的讨论信息就不会出现在你的News Feed中了。不过链接到评审中还是可以看到的。</p> <h3 id="通过审查">通过审查</h3> <p>如果你对作者的修改感到满意，那你就可以点击Accept。如果你觉得这些问题值得怀疑，那就点击<code>Raise concern</code></p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c7f524127b643c2848b10ec43ac9744~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-05-10_11-55-50.png"></p> <p>如果最初提交的修订没有得到Reviewer的Accept，可以按照Reviewer的要求处理这些问题并提交代码的修订到gitlab，然后可以将一个或几个新的修订附加到原始审核中以获得Accept。</p> <h3 id="发起修订">发起修订</h3> <p>使用idea提交代码的时候可以勾选Amend(修订)，勾选review with upsource选择对应的审查记录。完成一次修订提交。</p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75c953e9527f43bf846c31dbe9f1c4d3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-05-09_16-56-28.png"></p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/96f03c89c20f46bbb8991b7d0b42c0d6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-05-09_17-04-42.png"></p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b4d08a6b3b64bfa960e391676269071~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-05-10_11-58-01.png"></p> <h3 id="完成审查">完成审查</h3> <p>当达到所有审查者的要求后，审查者都Accept/raise concern这个 Review的修改结果后，表示接受此次修订，此次审查被视为完成。</p> <h3 id="关闭审查">关闭审查</h3> <p>审查者和代码作者都可以关闭 Review，可以在项目属性设置中代码作者是否有关闭Review的权限。</p> <h3 id="审核状态">审核状态</h3> <p>审查可以经历三个不同的阶段：</p> <ol><li><strong>待定</strong>— 已创建审阅并分配审阅者。</li> <li><strong>已完成</strong>——所有审阅者通过接受（accept ）或关注（raise concern）变更的时候。</li> <li><strong>已关闭</strong>— 由作者关闭，因为不需要或期望所有参与者采取进一步行动。</li></ol> <h2 id="四-其它实践">四：其它实践</h2> <p>upource允许自动添加工作流程，例如：可以通过添加对应触发器，自动添加对应的代码审查者</p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cac8ccc251fc431c8d9bcf2eaac20b36~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-05-10_17-11-09.png"></p> <p>也可以通过webhook完成整个自动构建流程和消息通知等</p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09f322c20fb049b3a6e022f956d6f8e1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-05-10_17-11-43.png"></p> <p>比如通过upsource webhook 发送对应通知消息，或者触发对应jenkins任务。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[代码审查指南]]></title>
            <link>http://stiles.cc/docs/engineering/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5%E6%8C%87%E5%8D%97.html</link>
            <guid isPermaLink="true">http://stiles.cc/docs/engineering/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5%E6%8C%87%E5%8D%97.html</guid>
            <pubDate>Sun, 08 May 2022 22:50:08 GMT</pubDate>
            <content:encoded><![CDATA[<p>代码审查的主要目的是确保代码库的整体代码健康状况随着时间的推移而改善。代码审查的所有工具和过程都是为此目的而设计的。</p> <p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a75be9014c2b4105952b8d44ad047db0~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="codereview_friendly.png"></p> <h2 id="why-为什么要代码审查">（why）为什么要代码审查</h2> <blockquote><p><em>Peer review—an activity in which people other than the author of a software deliverable examine it for defects and improvement opportunities—is one of the most powerful software quality tools available. Peer review methods include inspections, walkthroughs, peer desk checks, and other similar activities.</em></p> <p><em>- Karl E. Wiegers</em></p></blockquote> <p>上面这句话大概意思是: 同行评审软件交付物作者以外的其他人在其中检查缺陷和改进机会的活动,是可用的最强大的软件质量工具之一。同行评审方法包括检查、排查、同行桌面检查和其他类似活动。</p> <p>1.<strong>尽早发现 Bug 和设计中存在的问题,统一编码风格.</strong></p> <p>2.知识共享，获得最佳实践（如果在您的代码被审查时某个人建议一种更好的方法去做一些事）</p> <p>3.提高代码质量（当人们知道有人在阅读信息时，他们往往会写的更好）</p> <p>4.了解项目状态，至少有另一个人熟悉你的代码</p> <h2 id="who-谁做代码审查">（who）谁做代码审查</h2> <p>项目经理/架构师/相关开发人员/比你更资深的程序员，希望得到他们的专业反馈</p> <h2 id="how-如何进行代码审查">（how）如何进行代码审查</h2> <h2 id="_1-规范标准">1 规范标准</h2> <ol><li>原子性提交。一个提交包含一个不可分割的特性、修复或者优化，同时这个提交要尽可能小。(提交尽可能小可以聚焦，让错误/问题 一目了然)</li> <li>使用统一的代码风格 （阿里巴巴JAVA开发规范）</li> <li>当遇到代码冲突出现共识冲突的情况，通过视频/面对面询问的方式，而非通过代码审查评论来解决冲突。</li></ol> <h2 id="_2-审查的时机">2 审查的时机</h2> <p>最好的审查时机是，功能分支自测完成后，需要合并到 develop 分支申请提测前。越往后修改成本越高。</p> <p>提交 ：原则上至少一天提交一次。</p> <p>审查：代码审查理论上可以在任何碎片化时间进行，推荐在每天早上或者下班前抽出一段固定的时间审查前天/当天提交的代码。</p> <p>时间：单次代码审查的时间保持在5-20分钟</p> <h2 id="_3-代码评审应该关注的重点">3 代码评审应该关注的重点</h2> <ul><li>代码设计是否合理，是否有违背基本的设计模式理念（SOLID）</li> <li>代码的行为是否符合作者的预期，是否明显的逻辑错误</li> <li>是否符合系统的代码规范</li> <li>代码的可读性和可维护性是否良好，是否可以更简单。</li> <li>类，变量，方法等命名是否清晰</li></ul> <p><strong>参考资料</strong>
Google 工程实践文档:<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgoogle%2Feng-practices" target="_blank" rel="noopener noreferrer">github.com/google/eng-…<span> </span></a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[恰如其分的代码]]></title>
            <link>http://stiles.cc/docs/engineering/%E6%81%B0%E5%A6%82%E5%85%B6%E5%88%86%E7%9A%84%E4%BB%A3%E7%A0%81.html</link>
            <guid isPermaLink="true">http://stiles.cc/docs/engineering/%E6%81%B0%E5%A6%82%E5%85%B6%E5%88%86%E7%9A%84%E4%BB%A3%E7%A0%81.html</guid>
            <pubDate>Sun, 27 Mar 2022 12:10:06 GMT</pubDate>
            <content:encoded><![CDATA[<p>从业多年，也接触过java,c#,go,php,python,js等多种编程语言，每一种语言都能实现既定的业务逻辑，抛开底层运行原理来说，并没有丝毫的不同。 所以说代码之美应该超越边界之外来思考。一件事情的答案也许总是在更大的一个逻辑层面得到很好的解释。</p> <p>好比买一张桌子，其实不单单应该考虑的座子的整体舒适度，用料。更应该搭配到整个房间的布局上。</p> <p>很难说清楚一个代码片段的优秀与否。更应该讨论的是在整个服务乃至系统中的整体价值，是否做到了解耦（易修改，高度自治，不会有修改蔓延等问题），是否遵循设计原则（SOLID）做到了关注点分离（控制与逻辑业务的分离）。</p> <p>有位文豪说得好：“看一个作家的水平，不是看他发表了多少文字，而要看他的废纸篓里扔掉了多少。” 我觉得同样的理论适用于编程。好的程序员，他们删掉的代码，比留下来的还要多很多。如果你看见一个人写了很多代码，却没有删掉多少，那他的代码一定有很多垃圾。<a href="https://link.juejin.cn?target=http%3A%2F%2Fwww.yinwang.org%2Fblog-cn%2F2015%2F11%2F21%2Fprogramming-philosophy" target="_blank" rel="noopener noreferrer">— 王垠的博客<span> </span></a></p> <p>写到这里想起了《代码整洁之道》的一个片段</p> <div class="language-jsx extra-class"><pre class="language-jsx"><code>鲍勃进入模块。
他向下滚动到要修改的函数。
他停下来考虑可以做什么。
哦，他滚动到模块顶端，检查变量初始化。
现在他回到修改处，开始键入。
喔，他删掉了键入的内容。
他重新键入。
他又删除了！
他键入了一半什么东西，又删除掉。
他滚动到调用要修改函数的另一函数，看看是怎么调用的。
他回到修改处，重新键入刚才删掉的代码。
他停下来。
他再一次删掉代码！
他打开另一个窗口，查看别的子类，那是个负载函数吗？
…
复制代码
</code></pre></div><p>相信只要是工作过几个年头的程序员都有这样的经历，项目过程中花了大量的时间在阅读和理解系统代码的细节。良好的<strong>分离关注点</strong>，分层模块，就能极大的减少修改的担忧，也提升了代码的整洁性，为读者而写代码就能极大的提高后续的工作效率，即便那会使得编写过程更难。优秀的代码几乎都是不断演进提炼的，不可能一蹴而就。</p> <p>物皆有其位，而后物尽归其位，不要陷入到思考的误区，书写糟糕的代码只会影响您的工作。走快的唯一方法是先走好。工程师就有义务去梳理其中的恰如其分，使得读者赏心悦目。</p> <p><strong>总结：</strong> 如果说代码的恰如其分我想那就是阅读代码的人能一目了然，无需花费很多时间分析其中的不当之处。并无多少自己的东西，只是恰如其分的使用了一些老的论点来聊一聊自己对于优秀的代码的理解。希望能对您有所启发。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Liquibase简单介绍与使用]]></title>
            <link>http://stiles.cc/docs/engineering/Liquibase%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8.html</link>
            <guid isPermaLink="true">http://stiles.cc/docs/engineering/Liquibase%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8.html</guid>
            <pubDate>Mon, 05 Apr 2021 02:30:26 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="liquibase还是flyway">Liquibase还是Flyway</h2> <p>Flyway和Liquibase都支持专业数据库重构和版本控制所需的所有功能，因此您将始终知道要处理的数据库模式的版本以及它是否与软件版本匹配。两种工具都集成在Maven或Gradle构建脚本中以及Spring Boot生态系统中，您可以完全自动化数据库重构。</p> <p>Flyway使用SQL定义数据库更改，因此您可以定制SQL脚本，使其与基础数据库技术（例如Oracle或PostgreSQL）良好地配合使用。另一方面，使用Liquibase，您可以通过使用XML，YAML或JSON来定义数据库更改来引入抽象层。因此，Liquibase更适合在具有不同基础数据库技术的不同环境中安装的软件产品中使用。但是，如果您想完全控制SQL，Flyway是首选工具，因为您可以使用完全定制的SQL甚至Java代码来更改数据库。</p> <p>多种数据源的情况下使用Liquibase会更加合适，不需要维护多种数据库脚本，和学习多种数据库语言，Liquibase对于大型项目更加友好。</p> <h2 id="什么是liquibase">什么是Liquibase</h2> <p>Liquibase是一个用于跟踪、管理和应用数据库变化的开源的数据库重构工具。它将所有数据库的变化（包括结构和数据）都保存在 changelog 文件中，便于版本控制，它的目标是提供一种数据库类型无关的解决方案，通过执行 schema 类型的文件来达到迁移。</p> <p>官网：<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.liquibase.com%2F" target="_blank" rel="noopener noreferrer">docs.liquibase.com/<span> </span></a> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f1605123da94acdb4a7a9a7b7907c1e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="1617546202(1).jpg"></p> <h2 id="使用liquibase的数据库的ci-cd">使用Liquibase的数据库的CI / CD</h2> <p>实施端到端CI / CD要求将所有代码（包括数据库代码）检入版本控制系统，并作为软件发布过程的一部分进行部署。Liquibase可以帮助您实现这一目标。
您使用Liquibase进行的每个数据库架构更改都称为一个changeset。Liquibase使用changelogs跟踪所有变更集。Liquibase允许您创建一个触发器，该触发器通过指向更改日志文件来自动更新数据库。从这里，可以轻松地将流程集成到您的整个CI / CD流程中：</p> <p>1.将变更集文件推送到要素存储库
2.针对Dev分支创建拉取请求
3.在同行评审和批准之后，将功能分支与开发分支合并
4.在Dev服务器上配置的CI / CD实现触发Liquibase进行数据库更新
5.Liquibase会自动执行任何新的变更日志文件（而且足以记住已经运行了哪些脚本）</p> <h2 id="liquibase原理">Liquibase原理</h2> <p>支持XML、YAML和JSON格式的迁移脚本。默认情况下，Bean会在/db/changelog（相对于Classpath根目录）里查找db.changelog-master.yaml文件。Liquibase变更集都集中在一个文件里。changeset命令后的那行有一个id属性，要对数据库进行后续变更。可以添加一个新的changeset，只要id不一样就行。此外，id属性也不一定是数字，可以包含任意内容。应用程序启动时，Liquibase会读取db.changelog-master.yaml里的变更集指令集，与之前写入databaseChangeLog表里的内容做对比，随后执行未运行过的变更集。</p> <h2 id="liquibase-特性">Liquibase 特性</h2> <ul><li>支持几乎所有主流的数据库，如 MySQL, PostgreSQL, Oracle, Sql Server, DB2 等；</li> <li>支持多开发者的协作维护；</li> <li>日志文件支持多种格式，如 XML, YAML, JSON, SQL等；</li> <li>支持上下文相关逻辑</li> <li>生成数据库变更文档</li> <li>支持多种运行方式，如命令行、Spring 集成、Maven 插件、Gradle 插件等。</li></ul> <h2 id="springboot-整合-liquibase">SpringBoot 整合 liquibase</h2> <p><strong>一、引入依赖先在 pom 文件里引入依赖</strong></p> <div class="language-xml extra-class"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.liquibase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>liquibase-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
复制代码
</code></pre></div><p><strong>二、指定配置文件位置</strong></p> <p>在代码中新建一个 LiquibaseConfig 类，用于配置 Liquibase，指定配置文件的位置。</p> <div class="language-kotlin extra-class"><pre class="language-kotlin"><code><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> liquibase<span class="token punctuation">.</span>integration<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>SpringLiquibase<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token annotation builtin">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> LiquibaseConfig <span class="token punctuation">{</span>

  <span class="token annotation builtin">@Bean</span>
  <span class="token keyword">public</span> SpringLiquibase <span class="token function">liquibase</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SpringLiquibase liquibase <span class="token operator">=</span> new <span class="token function">SpringLiquibase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    liquibase<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//指定changelog的位置，这里使用的一个master文件引用其他文件的方式</span>
    liquibase<span class="token punctuation">.</span><span class="token function">setChangeLog</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"classpath:liquibase/master.xml"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    liquibase<span class="token punctuation">.</span><span class="token function">setContexts</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"development,test,production"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    liquibase<span class="token punctuation">.</span><span class="token function">setShouldRun</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> liquibase<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
复制代码
</code></pre></div><p><strong>三、编写配置文件</strong></p> <p>目录结构：
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4459593b38fd481ca7ccc76c13d61f45~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="liquibase.png">
src/main/resources 下新建一个文件夹：liquibase，用来存放跟 liquibase 相关的文件。
然后在 liquibase 文件夹下新建 master.xml 作为主文件。</p> <div class="language-ini extra-class"><pre class="language-ini"><code>&lt;databaseChangeLog
        <span class="token key attr-name">xmlns</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">http://www.liquibase.org/xml/ns/dbchangelog</span>"</span>
        <span class="token key attr-name">xmlns:xsi</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">http://www.w3.org/2001/XMLSchema-instance</span>"</span>
        <span class="token key attr-name">xsi:schemaLocation</span><span class="token punctuation">=</span><span class="token value attr-value">"http://www.liquibase.org/xml/ns/dbchangelog</span>
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd"&gt;

    <span class="token key attr-name">&lt;includeAll path</span><span class="token punctuation">=</span><span class="token value attr-value">"liquibase/changelogs/" relativeToChangelogFile="false"/&gt;</span>

&lt;/databaseChangeLog&gt;
复制代码
</code></pre></div><p>includeAll 标签可以把一个文件夹下的所有 changelog 都加载进来。如果单个加载可以用 include。
includeAll 标签里有两个属性：path 和 relativeToChangelogFile。</p> <table><thead><tr><th>Attribute</th> <th>Description</th></tr></thead> <tbody><tr><td>file</td> <td>指定要加载的文件或文件夹位置（在 include 标签里是 file）</td></tr> <tr><td>relativeToChangelogFile</td> <td>文件位置的路径是否相对于 root changelog 是相对路径，默认 false，即相对于 classpath 是相对路径。</td></tr></tbody></table> <p><strong>四、编写配置文件 changelog 介绍</strong></p> <div class="language-ini extra-class"><pre class="language-ini"><code><span class="token key attr-name">&lt;?xml version</span><span class="token punctuation">=</span><span class="token value attr-value">"1.0" encoding="UTF-8"?&gt;</span>
&lt;databaseChangeLog
        <span class="token key attr-name">xmlns</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">http://www.liquibase.org/xml/ns/dbchangelog</span>"</span>
        <span class="token key attr-name">xmlns:xsi</span><span class="token punctuation">=</span><span class="token value attr-value">"<span class="token inner-value">http://www.w3.org/2001/XMLSchema-instance</span>"</span>
        <span class="token key attr-name">xsi:schemaLocation</span><span class="token punctuation">=</span><span class="token value attr-value">"http://www.liquibase.org/xml/ns/dbchangelog</span>
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd"&gt;

    <span class="token key attr-name">&lt;changeSet author</span><span class="token punctuation">=</span><span class="token value attr-value">"stiles" id="20210330-1" &gt;</span>
        <span class="token key attr-name">&lt;createTable tableName</span><span class="token punctuation">=</span><span class="token value attr-value">"department" remarks="部门表"&gt;</span>
            <span class="token key attr-name">&lt;column name</span><span class="token punctuation">=</span><span class="token value attr-value">"id" type="int" autoIncrement="true" &gt;</span>
                <span class="token key attr-name">&lt;constraints primaryKey</span><span class="token punctuation">=</span><span class="token value attr-value">"true" nullable="false"/&gt;</span>
            &lt;/column&gt;
            <span class="token key attr-name">&lt;column name</span><span class="token punctuation">=</span><span class="token value attr-value">"name" type="varchar(50)"&gt;</span>
                <span class="token key attr-name">&lt;constraints nullable</span><span class="token punctuation">=</span><span class="token value attr-value">"false"/&gt;</span>
            &lt;/column&gt;
            <span class="token key attr-name">&lt;column name</span><span class="token punctuation">=</span><span class="token value attr-value">"active" type="boolean" defaultValueBoolean="true"/&gt;</span>
        &lt;/createTable&gt;
    &lt;/changeSet&gt;
    <span class="token key attr-name">&lt;changeSet author</span><span class="token punctuation">=</span><span class="token value attr-value">"stiles" id="20210330-2" &gt;</span>
        <span class="token key attr-name">&lt;addColumn  tableName</span><span class="token punctuation">=</span><span class="token value attr-value">"department"&gt;</span>
            <span class="token key attr-name">&lt;column name</span><span class="token punctuation">=</span><span class="token value attr-value">"company"  type="VARCHAR(100)"&gt;&lt;/column&gt;</span>
        &lt;/addColumn&gt;
    &lt;/changeSet&gt;
    
    <span class="token key attr-name">&lt;changeSet author</span><span class="token punctuation">=</span><span class="token value attr-value">"stiles"  id="20210330-3"&gt;</span>
        <span class="token key attr-name">&lt;insert tableName</span><span class="token punctuation">=</span><span class="token value attr-value">"department"&gt;</span>
            <span class="token key attr-name">&lt;column name</span><span class="token punctuation">=</span><span class="token value attr-value">"id" valueNumeric="1"/&gt;</span>
            <span class="token key attr-name">&lt;column name</span><span class="token punctuation">=</span><span class="token value attr-value">"name" value="stiles_1"/&gt;</span>
            <span class="token key attr-name">&lt;column name</span><span class="token punctuation">=</span><span class="token value attr-value">"active" valueNumeric="1"/&gt;</span>
        &lt;/insert&gt;
        <span class="token key attr-name">&lt;insert tableName</span><span class="token punctuation">=</span><span class="token value attr-value">"department"&gt;</span>
            <span class="token key attr-name">&lt;column name</span><span class="token punctuation">=</span><span class="token value attr-value">"id" valueNumeric="2"/&gt;</span>
            <span class="token key attr-name">&lt;column name</span><span class="token punctuation">=</span><span class="token value attr-value">"name" value="stiles_2"/&gt;</span>
            <span class="token key attr-name">&lt;column name</span><span class="token punctuation">=</span><span class="token value attr-value">"active" valueNumeric="1"/&gt;</span>
        &lt;/insert&gt;
        <span class="token key attr-name">&lt;insert tableName</span><span class="token punctuation">=</span><span class="token value attr-value">"department"&gt;</span>
            <span class="token key attr-name">&lt;column name</span><span class="token punctuation">=</span><span class="token value attr-value">"id" valueNumeric="3"/&gt;</span>
            <span class="token key attr-name">&lt;column name</span><span class="token punctuation">=</span><span class="token value attr-value">"name" value="stiles_3"/&gt;</span>
            <span class="token key attr-name">&lt;column name</span><span class="token punctuation">=</span><span class="token value attr-value">"active" valueNumeric="0"/&gt;</span>
        &lt;/insert&gt;
    &lt;/changeSet&gt;
    <span class="token key attr-name">&lt;changeSet author</span><span class="token punctuation">=</span><span class="token value attr-value">"stiles" id="20210330-4" &gt;</span>
        <span class="token key attr-name">&lt;update tableName</span><span class="token punctuation">=</span><span class="token value attr-value">"department"&gt;</span>
            <span class="token key attr-name">&lt;column name</span><span class="token punctuation">=</span><span class="token value attr-value">"name" value="stiles_33"/&gt;</span>
            <span class="token key attr-name">&lt;where&gt;name</span><span class="token punctuation">=</span><span class="token value attr-value">'stiles_3'&lt;/where&gt;</span>
        &lt;/update&gt;
    &lt;/changeSet&gt;
&lt;/databaseChangeLog&gt;
复制代码
</code></pre></div><p>SQL 格式的 changelogs 文件
变更集 changeset 是通过 author + id 的方式来保证唯一性
变更集提供以下属性：
stripComments:设置为 true 可在执行之前删除 SQL 中的任何注释, 否则为 false。如果未设置, 则默认值为 true
splitStatements:设置为false时，在“s”和“go”上不会使用Liquibase 拆分语句，默认为true。
endDelimiter:应用于语句结尾的分隔符。默认为“；”，也可以设置为“”
runAlways:在每次运行时执行变更集, 即使之前已运行
runOnChange:在首次看到更改并每次更改变更集时执行更改
context:如果在运行时传递了特定上下文, 则执行更改。任何字符串都可以用于上下文名称, 并且大小写不敏感。
logicalFilePath:用于在创建变更集的唯一标识符时重写文件名和路径。移动或重命名更改日志时所必需。
labels:标签是对变更集进行分类的通用方法集类似上下文, 但工作方式正好相反。如果不是在运行时定义一组上下文, 然后在变更集中定义一个匹配表达式, 而是在上下文中定义一组标签, 在运行时定义一个匹配表达式。
runInTransaction:变更集是否应作为单个事务运行 (如果可能)，默认值为 true。请注意此属性，如果设置为 false, 并且通过运行包含多个语句的变更集部分发生错误, 则 liquibase 数据库的 databasechangeloglock 表将处于无效状态
failOnError:如果在执行变更集时发生错误, 迁移是否应返回失败
dbms:要用于该变更集的数据库的类型。当迁移步骤运行时, 它将根据此属性检查数据库类型，如：oracle、mysql
logicalFilePath:在数据库 databasechangeloglock 中设置逻辑文件路径, 而不是在执行 liquibase 的 sql 物理文件位置。</p> <p><strong>五、Liquibase最佳实践</strong></p> <p>changelog管理建议：</p> <p><strong>一个变更集只设置一次更改</strong></p> <p>尽可能地避免对一个变更集进行多次更改，以避免自动提交 SQL 语句而可能使数据库处于非预期状态。 如 --changeset stiles:1 变更集，只新建一张 department 表，后面不再修改该变更集，如果需要变更，可以新增一条变更集。
变更集的 ID
选择适合您的方法。有的人是使用从 1 开始的序列号, 并且在更改日志中是唯一的，也有些人选择一个描述性的名称（例如：new-address-table）</p> <p><strong>总是考虑回滚</strong></p> <p>尽量尝试以可以回滚的方式编写变更集，如 --changeset stiles:1 变更集新建一个 department 表，在后面跟上回滚的 SQL， --rollback drop table department;</p> <p><strong>为变更集添加注释</strong></p> <p>尽量为每一个变更集条目增加注释</p> <p>演示案例：
<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FstilesBoy%2Fliquibase_example" target="_blank" rel="noopener noreferrer">github.com/stilesBoy/l…<span> </span></a></p> <p>参考资料：
<a href="https://link.juejin.cn?target=https%3A%2F%2Fthorben-janssen.com%2Fliquibase-update-existing-database%2F" target="_blank" rel="noopener noreferrer">thorben-janssen.com/liquibase-u…<span> </span></a> <a href="https://link.juejin.cn?target=https%3A%2F%2Fblog.csdn.net%2Fcenxuu%2Farticle%2Fdetails%2F86685662" target="_blank" rel="noopener noreferrer">blog.csdn.net/cenxuu/arti…<span> </span></a> <a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.it610.com%2Farticle%2F1176477856620949504.htm" target="_blank" rel="noopener noreferrer">www.it610.com/article/117…<span> </span></a></p>]]></content:encoded>
        </item>
    </channel>
</rss>